
C:\Users\RAJEND~1\AppData\Local\Temp\arduino_build_400438/at16_motor_speed_conroll.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__ctors_end>
   4:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   8:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
   c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  10:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  14:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  18:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  1c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  20:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  24:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <__vector_9>
  28:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  2c:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__vector_11>
  30:	0c 94 04 03 	jmp	0x608	; 0x608 <__vector_12>
  34:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  38:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  3c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  40:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  44:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  48:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  4c:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>
  50:	0c 94 92 00 	jmp	0x124	; 0x124 <__bad_interrupt>

00000054 <__trampolines_end>:
__trampolines_start():
  54:	00 00       	nop
  56:	00 02       	muls	r16, r16
	...
  60:	05 04       	cpc	r0, r5
  62:	00 07       	cpc	r16, r16
	...

00000074 <digital_pin_to_bit_mask_PGM>:
  74:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
  84:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

00000094 <digital_pin_to_port_PGM>:
  94:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
  a4:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

000000b4 <port_to_input_PGM>:
  b4:	00 00 39 00 36 00 33 00 30 00                       ..9.6.3.0.

000000be <port_to_output_PGM>:
  be:	00 00 3b 00 38 00 35 00 32 00                       ..;.8.5.2.

000000c8 <port_to_mode_PGM>:
  c8:	00 00 3a 00 37 00 34 00 31 00                       ..:.7.4.1.

000000d2 <__ctors_start>:
__ctors_start():
  d2:	34 03       	mulsu	r19, r20

000000d4 <__ctors_end>:
__dtors_end():
  d4:	11 24       	eor	r1, r1
  d6:	1f be       	out	0x3f, r1	; 63
  d8:	cf e5       	ldi	r28, 0x5F	; 95
  da:	d4 e0       	ldi	r29, 0x04	; 4
  dc:	de bf       	out	0x3e, r29	; 62
  de:	cd bf       	out	0x3d, r28	; 61

000000e0 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
  e0:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
  e2:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
  e4:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
  e6:	ec e6       	ldi	r30, 0x6C	; 108
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
  e8:	f9 e0       	ldi	r31, 0x09	; 9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
  ec:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
  ee:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
  f0:	aa 37       	cpi	r26, 0x7A	; 122
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
  f2:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
  f4:	d9 f7       	brne	.-10     	; 0xec <__do_copy_data+0xc>

000000f6 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
  f6:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  f8:	aa e7       	ldi	r26, 0x7A	; 122
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  fa:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  fc:	01 c0       	rjmp	.+2      	; 0x100 <.do_clear_bss_start>

000000fe <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
  fe:	1d 92       	st	X+, r1

00000100 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
 100:	a2 32       	cpi	r26, 0x22	; 34
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
 102:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
 104:	e1 f7       	brne	.-8      	; 0xfe <.do_clear_bss_loop>

00000106 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
 106:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
 108:	ca e6       	ldi	r28, 0x6A	; 106
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
 10a:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
 10c:	04 c0       	rjmp	.+8      	; 0x116 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
 10e:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
 110:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
 112:	0e 94 9f 04 	call	0x93e	; 0x93e <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
 116:	c9 36       	cpi	r28, 0x69	; 105
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
 118:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
 11a:	c9 f7       	brne	.-14     	; 0x10e <__do_global_ctors+0x8>
 11c:	0e 94 ce 03 	call	0x79c	; 0x79c <main>
 120:	0c 94 b4 04 	jmp	0x968	; 0x968 <_exit>

00000124 <__bad_interrupt>:
__vector_1():
 124:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000128 <setup>:
_ZN14HardwareSerial5beginEm():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.h:121
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
 128:	26 e0       	ldi	r18, 0x06	; 6
 12a:	40 e8       	ldi	r20, 0x80	; 128
 12c:	55 e2       	ldi	r21, 0x25	; 37
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	8c e7       	ldi	r24, 0x7C	; 124
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	0e 94 79 02 	call	0x4f2	; 0x4f2 <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
C:\Users\Rajenda Bera\Documents\Arduino\at16_motor_speed_conroll/at16_motor_speed_conroll.ino:9
int sp = 30;
int x = 0;
void setup() {
  // put your setup code here, to run once:
Serial.begin(9600);
pinMode(in1, OUTPUT);
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <in1>
 140:	0e 94 13 01 	call	0x226	; 0x226 <pinMode>
C:\Users\Rajenda Bera\Documents\Arduino\at16_motor_speed_conroll/at16_motor_speed_conroll.ino:10
pinMode(in2, OUTPUT);
 144:	61 e0       	ldi	r22, 0x01	; 1
 146:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <in2>
 14a:	0e 94 13 01 	call	0x226	; 0x226 <pinMode>
C:\Users\Rajenda Bera\Documents\Arduino\at16_motor_speed_conroll/at16_motor_speed_conroll.ino:11
pinMode(sp, OUTPUT);
 14e:	61 e0       	ldi	r22, 0x01	; 1
 150:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 154:	0e 94 13 01 	call	0x226	; 0x226 <pinMode>
C:\Users\Rajenda Bera\Documents\Arduino\at16_motor_speed_conroll/at16_motor_speed_conroll.ino:12
pinMode(pot, INPUT);
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pot>
 15e:	0c 94 13 01 	jmp	0x226	; 0x226 <pinMode>

00000162 <loop>:
loop():
C:\Users\Rajenda Bera\Documents\Arduino\at16_motor_speed_conroll/at16_motor_speed_conroll.ino:15
}

void loop() {
 162:	af 92       	push	r10
 164:	bf 92       	push	r11
 166:	cf 92       	push	r12
 168:	df 92       	push	r13
 16a:	ef 92       	push	r14
 16c:	ff 92       	push	r15
 16e:	0f 93       	push	r16
 170:	1f 93       	push	r17
C:\Users\Rajenda Bera\Documents\Arduino\at16_motor_speed_conroll/at16_motor_speed_conroll.ino:17
  // put your main code here, to run repeatedly:
x = digitalRead(pot);
 172:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pot>
 176:	0e 94 7d 01 	call	0x2fa	; 0x2fa <digitalRead>
 17a:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__data_end+0x1>
 17e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
C:\Users\Rajenda Bera\Documents\Arduino\at16_motor_speed_conroll/at16_motor_speed_conroll.ino:18
x = map(x, 0, 1023, 0, 255);
 182:	bc 01       	movw	r22, r24
 184:	99 0f       	add	r25, r25
 186:	88 0b       	sbc	r24, r24
 188:	99 0b       	sbc	r25, r25
 18a:	1f 92       	push	r1
 18c:	1f 92       	push	r1
 18e:	1f 92       	push	r1
 190:	2f ef       	ldi	r18, 0xFF	; 255
 192:	2f 93       	push	r18
 194:	a1 2c       	mov	r10, r1
 196:	b1 2c       	mov	r11, r1
 198:	65 01       	movw	r12, r10
 19a:	ee 24       	eor	r14, r14
 19c:	ea 94       	dec	r14
 19e:	13 e0       	ldi	r17, 0x03	; 3
 1a0:	f1 2e       	mov	r15, r17
 1a2:	00 e0       	ldi	r16, 0x00	; 0
 1a4:	10 e0       	ldi	r17, 0x00	; 0
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	a9 01       	movw	r20, r18
 1ac:	0e 94 8c 03 	call	0x718	; 0x718 <map(long, long, long, long, long)>
 1b0:	cb 01       	movw	r24, r22
 1b2:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <__data_end>
 1b6:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__data_end+0x1>
C:\Users\Rajenda Bera\Documents\Arduino\at16_motor_speed_conroll/at16_motor_speed_conroll.ino:19
digitalWrite(sp, x);
 1ba:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1be:	0e 94 4f 01 	call	0x29e	; 0x29e <digitalWrite>
C:\Users\Rajenda Bera\Documents\Arduino\at16_motor_speed_conroll/at16_motor_speed_conroll.ino:20
digitalWrite(in1, 1);
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <in1>
 1c8:	0e 94 4f 01 	call	0x29e	; 0x29e <digitalWrite>
C:\Users\Rajenda Bera\Documents\Arduino\at16_motor_speed_conroll/at16_motor_speed_conroll.ino:21
digitalWrite(in2, 0);
 1cc:	0f 90       	pop	r0
 1ce:	0f 90       	pop	r0
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	60 e0       	ldi	r22, 0x00	; 0
 1d6:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <in2>
C:\Users\Rajenda Bera\Documents\Arduino\at16_motor_speed_conroll/at16_motor_speed_conroll.ino:23

}
 1da:	1f 91       	pop	r17
 1dc:	0f 91       	pop	r16
 1de:	ff 90       	pop	r15
 1e0:	ef 90       	pop	r14
 1e2:	df 90       	pop	r13
 1e4:	cf 90       	pop	r12
 1e6:	bf 90       	pop	r11
 1e8:	af 90       	pop	r10
C:\Users\Rajenda Bera\Documents\Arduino\at16_motor_speed_conroll/at16_motor_speed_conroll.ino:21
  // put your main code here, to run repeatedly:
x = digitalRead(pot);
x = map(x, 0, 1023, 0, 255);
digitalWrite(sp, x);
digitalWrite(in1, 1);
digitalWrite(in2, 0);
 1ea:	0c 94 4f 01 	jmp	0x29e	; 0x29e <digitalWrite>

000001ee <turnOffPWM>:
turnOffPWM():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
 1ee:	84 30       	cpi	r24, 0x04	; 4
 1f0:	59 f0       	breq	.+22     	; 0x208 <turnOffPWM+0x1a>
 1f2:	28 f4       	brcc	.+10     	; 0x1fe <turnOffPWM+0x10>
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	99 f0       	breq	.+38     	; 0x21e <turnOffPWM+0x30>
 1f8:	82 30       	cpi	r24, 0x02	; 2
 1fa:	89 f0       	breq	.+34     	; 0x21e <turnOffPWM+0x30>
 1fc:	08 95       	ret
 1fe:	85 30       	cpi	r24, 0x05	; 5
 200:	39 f0       	breq	.+14     	; 0x210 <turnOffPWM+0x22>
 202:	87 30       	cpi	r24, 0x07	; 7
 204:	41 f0       	breq	.+16     	; 0x216 <turnOffPWM+0x28>
 206:	08 95       	ret
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
 208:	8f b5       	in	r24, 0x2f	; 47
 20a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
 20c:	8f bd       	out	0x2f, r24	; 47
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
 20e:	08 95       	ret
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
 210:	8f b5       	in	r24, 0x2f	; 47
 212:	8f 7d       	andi	r24, 0xDF	; 223
 214:	fb cf       	rjmp	.-10     	; 0x20c <turnOffPWM+0x1e>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
 216:	85 b5       	in	r24, 0x25	; 37
 218:	8f 7d       	andi	r24, 0xDF	; 223
 21a:	85 bd       	out	0x25, r24	; 37
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:100
        break;
 21c:	08 95       	ret
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:171
    #if defined(TCCR0) && defined(COM01)
      case TIMER0:
        TCCR0 &= ~_BV(COM01);
        break;
      case TIMER0A:
        TCCR0 &= ~_BV(COM01);
 21e:	83 b7       	in	r24, 0x33	; 51
 220:	8f 7d       	andi	r24, 0xDF	; 223
 222:	83 bf       	out	0x33, r24	; 51
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:185
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
        break;
    #endif
  }
}
 224:	08 95       	ret

00000226 <pinMode>:
pinMode():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	fc 01       	movw	r30, r24
 22e:	ec 58       	subi	r30, 0x8C	; 140
 230:	ff 4f       	sbci	r31, 0xFF	; 255
 232:	24 91       	lpm	r18, Z
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
 234:	8c 56       	subi	r24, 0x6C	; 108
 236:	9f 4f       	sbci	r25, 0xFF	; 255
 238:	fc 01       	movw	r30, r24
 23a:	84 91       	lpm	r24, Z
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
 23c:	88 23       	and	r24, r24
 23e:	c9 f0       	breq	.+50     	; 0x272 <pinMode+0x4c>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	88 0f       	add	r24, r24
 244:	99 1f       	adc	r25, r25
 246:	fc 01       	movw	r30, r24
 248:	e8 53       	subi	r30, 0x38	; 56
 24a:	ff 4f       	sbci	r31, 0xFF	; 255
 24c:	a5 91       	lpm	r26, Z+
 24e:	b4 91       	lpm	r27, Z
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
 250:	fc 01       	movw	r30, r24
 252:	e2 54       	subi	r30, 0x42	; 66
 254:	ff 4f       	sbci	r31, 0xFF	; 255
 256:	c5 91       	lpm	r28, Z+
 258:	d4 91       	lpm	r29, Z
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
 25a:	61 11       	cpse	r22, r1
 25c:	0d c0       	rjmp	.+26     	; 0x278 <pinMode+0x52>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
 25e:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
 260:	f8 94       	cli
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
 262:	8c 91       	ld	r24, X
 264:	20 95       	com	r18
 266:	82 23       	and	r24, r18
 268:	8c 93       	st	X, r24
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
 26a:	88 81       	ld	r24, Y
 26c:	28 23       	and	r18, r24
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
 26e:	28 83       	st	Y, r18
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
 270:	9f bf       	out	0x3f, r25	; 63
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	08 95       	ret
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
 278:	62 30       	cpi	r22, 0x02	; 2
 27a:	51 f4       	brne	.+20     	; 0x290 <pinMode+0x6a>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
 27c:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
 27e:	f8 94       	cli
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
 280:	3c 91       	ld	r19, X
 282:	82 2f       	mov	r24, r18
 284:	80 95       	com	r24
 286:	83 23       	and	r24, r19
 288:	8c 93       	st	X, r24
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
 28a:	e8 81       	ld	r30, Y
 28c:	2e 2b       	or	r18, r30
 28e:	ef cf       	rjmp	.-34     	; 0x26e <pinMode+0x48>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
 290:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
 292:	f8 94       	cli
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
 294:	ec 91       	ld	r30, X
 296:	2e 2b       	or	r18, r30
 298:	2c 93       	st	X, r18
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
 29a:	8f bf       	out	0x3f, r24	; 63
 29c:	ea cf       	rjmp	.-44     	; 0x272 <pinMode+0x4c>

0000029e <digitalWrite>:
digitalWrite():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
 29e:	1f 93       	push	r17
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
 2a4:	28 2f       	mov	r18, r24
 2a6:	30 e0       	ldi	r19, 0x00	; 0
 2a8:	f9 01       	movw	r30, r18
 2aa:	ec 5a       	subi	r30, 0xAC	; 172
 2ac:	ff 4f       	sbci	r31, 0xFF	; 255
 2ae:	84 91       	lpm	r24, Z
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
 2b0:	f9 01       	movw	r30, r18
 2b2:	ec 58       	subi	r30, 0x8C	; 140
 2b4:	ff 4f       	sbci	r31, 0xFF	; 255
 2b6:	d4 91       	lpm	r29, Z
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
 2b8:	f9 01       	movw	r30, r18
 2ba:	ec 56       	subi	r30, 0x6C	; 108
 2bc:	ff 4f       	sbci	r31, 0xFF	; 255
 2be:	c4 91       	lpm	r28, Z
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
 2c0:	cc 23       	and	r28, r28
 2c2:	a9 f0       	breq	.+42     	; 0x2ee <digitalWrite+0x50>
 2c4:	16 2f       	mov	r17, r22
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 2c6:	81 11       	cpse	r24, r1
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
 2c8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <turnOffPWM>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
 2cc:	ec 2f       	mov	r30, r28
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	ee 0f       	add	r30, r30
 2d2:	ff 1f       	adc	r31, r31
 2d4:	e2 54       	subi	r30, 0x42	; 66
 2d6:	ff 4f       	sbci	r31, 0xFF	; 255
 2d8:	a5 91       	lpm	r26, Z+
 2da:	b4 91       	lpm	r27, Z
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
 2dc:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
 2de:	f8 94       	cli
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
 2e0:	ec 91       	ld	r30, X
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
 2e2:	11 11       	cpse	r17, r1
 2e4:	08 c0       	rjmp	.+16     	; 0x2f6 <digitalWrite+0x58>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
 2e6:	d0 95       	com	r29
 2e8:	de 23       	and	r29, r30
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
 2ea:	dc 93       	st	X, r29
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
 2ec:	8f bf       	out	0x3f, r24	; 63
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:212
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	1f 91       	pop	r17
 2f4:	08 95       	ret
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
 2f6:	de 2b       	or	r29, r30
 2f8:	f8 cf       	rjmp	.-16     	; 0x2ea <digitalWrite+0x4c>

000002fa <digitalRead>:
digitalRead():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
 2fe:	28 2f       	mov	r18, r24
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	f9 01       	movw	r30, r18
 304:	ec 5a       	subi	r30, 0xAC	; 172
 306:	ff 4f       	sbci	r31, 0xFF	; 255
 308:	84 91       	lpm	r24, Z
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
 30a:	f9 01       	movw	r30, r18
 30c:	ec 58       	subi	r30, 0x8C	; 140
 30e:	ff 4f       	sbci	r31, 0xFF	; 255
 310:	d4 91       	lpm	r29, Z
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
 312:	f9 01       	movw	r30, r18
 314:	ec 56       	subi	r30, 0x6C	; 108
 316:	ff 4f       	sbci	r31, 0xFF	; 255
 318:	c4 91       	lpm	r28, Z
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
 31a:	cc 23       	and	r28, r28
 31c:	a1 f0       	breq	.+40     	; 0x346 <digitalRead+0x4c>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 31e:	81 11       	cpse	r24, r1
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
 320:	0e 94 f7 00 	call	0x1ee	; 0x1ee <turnOffPWM>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
 324:	ec 2f       	mov	r30, r28
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	ee 0f       	add	r30, r30
 32a:	ff 1f       	adc	r31, r31
 32c:	ec 54       	subi	r30, 0x4C	; 76
 32e:	ff 4f       	sbci	r31, 0xFF	; 255
 330:	a5 91       	lpm	r26, Z+
 332:	b4 91       	lpm	r27, Z
 334:	ec 91       	ld	r30, X
 336:	ed 23       	and	r30, r29
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	09 f4       	brne	.+2      	; 0x340 <digitalRead+0x46>
 33e:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	08 95       	ret
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	fa cf       	rjmp	.-12     	; 0x340 <digitalRead+0x46>

0000034c <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 34c:	fc 01       	movw	r30, r24
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 34e:	91 8d       	ldd	r25, Z+25	; 0x19
 350:	22 8d       	ldd	r18, Z+26	; 0x1a
 352:	89 2f       	mov	r24, r25
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	80 5c       	subi	r24, 0xC0	; 192
 358:	9f 4f       	sbci	r25, 0xFF	; 255
 35a:	82 1b       	sub	r24, r18
 35c:	91 09       	sbc	r25, r1
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
 35e:	8f 73       	andi	r24, 0x3F	; 63
 360:	99 27       	eor	r25, r25
 362:	08 95       	ret

00000364 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
 364:	fc 01       	movw	r30, r24
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
 366:	91 8d       	ldd	r25, Z+25	; 0x19
 368:	82 8d       	ldd	r24, Z+26	; 0x1a
 36a:	98 17       	cp	r25, r24
 36c:	31 f0       	breq	.+12     	; 0x37a <HardwareSerial::peek()+0x16>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 36e:	82 8d       	ldd	r24, Z+26	; 0x1a
 370:	e8 0f       	add	r30, r24
 372:	f1 1d       	adc	r31, r1
 374:	85 8d       	ldd	r24, Z+29	; 0x1d
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	08 95       	ret
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 37a:	8f ef       	ldi	r24, 0xFF	; 255
 37c:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 37e:	08 95       	ret

00000380 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
 380:	fc 01       	movw	r30, r24
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 382:	91 8d       	ldd	r25, Z+25	; 0x19
 384:	82 8d       	ldd	r24, Z+26	; 0x1a
 386:	98 17       	cp	r25, r24
 388:	61 f0       	breq	.+24     	; 0x3a2 <HardwareSerial::read()+0x22>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 38a:	a2 8d       	ldd	r26, Z+26	; 0x1a
 38c:	ae 0f       	add	r26, r30
 38e:	bf 2f       	mov	r27, r31
 390:	b1 1d       	adc	r27, r1
 392:	5d 96       	adiw	r26, 0x1d	; 29
 394:	8c 91       	ld	r24, X
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 396:	92 8d       	ldd	r25, Z+26	; 0x1a
 398:	9f 5f       	subi	r25, 0xFF	; 255
 39a:	9f 73       	andi	r25, 0x3F	; 63
 39c:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	08 95       	ret
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 3a2:	8f ef       	ldi	r24, 0xFF	; 255
 3a4:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 3a6:	08 95       	ret

000003a8 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
 3a8:	fc 01       	movw	r30, r24
 3aa:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
 3ac:	44 8d       	ldd	r20, Z+28	; 0x1c
 3ae:	25 2f       	mov	r18, r21
 3b0:	30 e0       	ldi	r19, 0x00	; 0
 3b2:	84 2f       	mov	r24, r20
 3b4:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 3b6:	82 1b       	sub	r24, r18
 3b8:	93 0b       	sbc	r25, r19
 3ba:	54 17       	cp	r21, r20
 3bc:	10 f0       	brcs	.+4      	; 0x3c2 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
 3be:	cf 96       	adiw	r24, 0x3f	; 63
 3c0:	08 95       	ret
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
 3c2:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
 3c4:	08 95       	ret

000003c6 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 3c6:	8a e2       	ldi	r24, 0x2A	; 42
 3c8:	93 e0       	ldi	r25, 0x03	; 3
 3ca:	89 2b       	or	r24, r25
 3cc:	49 f0       	breq	.+18     	; 0x3e0 <serialEventRun()+0x1a>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	89 2b       	or	r24, r25
 3d4:	29 f0       	breq	.+10     	; 0x3e0 <serialEventRun()+0x1a>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
 3d6:	0e 94 2a 03 	call	0x654	; 0x654 <Serial0_available()>
 3da:	81 11       	cpse	r24, r1
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:66
 3dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
 3e0:	08 95       	ret

000003e2 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 3e2:	fc 01       	movw	r30, r24
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 3e4:	a4 8d       	ldd	r26, Z+28	; 0x1c
 3e6:	a8 0f       	add	r26, r24
 3e8:	b9 2f       	mov	r27, r25
 3ea:	b1 1d       	adc	r27, r1
 3ec:	a3 5a       	subi	r26, 0xA3	; 163
 3ee:	bf 4f       	sbci	r27, 0xFF	; 255
 3f0:	2c 91       	ld	r18, X
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 3f2:	84 8d       	ldd	r24, Z+28	; 0x1c
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	8f 73       	andi	r24, 0x3F	; 63
 3fa:	99 27       	eor	r25, r25
 3fc:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
 3fe:	a6 89       	ldd	r26, Z+22	; 0x16
 400:	b7 89       	ldd	r27, Z+23	; 0x17
 402:	2c 93       	st	X, r18
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
 404:	a0 89       	ldd	r26, Z+16	; 0x10
 406:	b1 89       	ldd	r27, Z+17	; 0x11
 408:	8c 91       	ld	r24, X
 40a:	80 64       	ori	r24, 0x40	; 64
 40c:	8c 93       	st	X, r24
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
 40e:	93 8d       	ldd	r25, Z+27	; 0x1b
 410:	84 8d       	ldd	r24, Z+28	; 0x1c
 412:	98 13       	cpse	r25, r24
 414:	06 c0       	rjmp	.+12     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
 416:	02 88       	ldd	r0, Z+18	; 0x12
 418:	f3 89       	ldd	r31, Z+19	; 0x13
 41a:	e0 2d       	mov	r30, r0
 41c:	80 81       	ld	r24, Z
 41e:	8f 7d       	andi	r24, 0xDF	; 223
 420:	80 83       	st	Z, r24
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
 422:	08 95       	ret

00000424 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 424:	cf 93       	push	r28
 426:	df 93       	push	r29
 428:	ec 01       	movw	r28, r24
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 42a:	88 8d       	ldd	r24, Y+24	; 0x18
 42c:	88 23       	and	r24, r24
 42e:	b9 f0       	breq	.+46     	; 0x45e <HardwareSerial::flush()+0x3a>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 430:	aa 89       	ldd	r26, Y+18	; 0x12
 432:	bb 89       	ldd	r27, Y+19	; 0x13
 434:	e8 89       	ldd	r30, Y+16	; 0x10
 436:	f9 89       	ldd	r31, Y+17	; 0x11
 438:	8c 91       	ld	r24, X
 43a:	85 fd       	sbrc	r24, 5
 43c:	03 c0       	rjmp	.+6      	; 0x444 <HardwareSerial::flush()+0x20>
 43e:	80 81       	ld	r24, Z
 440:	86 fd       	sbrc	r24, 6
 442:	0d c0       	rjmp	.+26     	; 0x45e <HardwareSerial::flush()+0x3a>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 444:	0f b6       	in	r0, 0x3f	; 63
 446:	07 fc       	sbrc	r0, 7
 448:	f7 cf       	rjmp	.-18     	; 0x438 <HardwareSerial::flush()+0x14>
 44a:	8c 91       	ld	r24, X
 44c:	85 ff       	sbrs	r24, 5
 44e:	f2 cf       	rjmp	.-28     	; 0x434 <HardwareSerial::flush()+0x10>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
 450:	80 81       	ld	r24, Z
 452:	85 ff       	sbrs	r24, 5
 454:	ed cf       	rjmp	.-38     	; 0x430 <HardwareSerial::flush()+0xc>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
 456:	ce 01       	movw	r24, r28
 458:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <HardwareSerial::_tx_udr_empty_irq()>
 45c:	e9 cf       	rjmp	.-46     	; 0x430 <HardwareSerial::flush()+0xc>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 45e:	df 91       	pop	r29
 460:	cf 91       	pop	r28
 462:	08 95       	ret

00000464 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
 464:	ef 92       	push	r14
 466:	ff 92       	push	r15
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	ec 01       	movw	r28, r24
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 476:	9b 8d       	ldd	r25, Y+27	; 0x1b
 478:	8c 8d       	ldd	r24, Y+28	; 0x1c
 47a:	98 13       	cpse	r25, r24
 47c:	16 c0       	rjmp	.+44     	; 0x4aa <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
 47e:	e8 89       	ldd	r30, Y+16	; 0x10
 480:	f9 89       	ldd	r31, Y+17	; 0x11
 482:	80 81       	ld	r24, Z
 484:	85 ff       	sbrs	r24, 5
 486:	11 c0       	rjmp	.+34     	; 0x4aa <HardwareSerial::write(unsigned char)+0x46>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
 488:	ee 89       	ldd	r30, Y+22	; 0x16
 48a:	ff 89       	ldd	r31, Y+23	; 0x17
 48c:	60 83       	st	Z, r22
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
 48e:	e8 89       	ldd	r30, Y+16	; 0x10
 490:	f9 89       	ldd	r31, Y+17	; 0x11
 492:	80 81       	ld	r24, Z
 494:	80 64       	ori	r24, 0x40	; 64
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
 496:	80 83       	st	Z, r24
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	df 91       	pop	r29
 49e:	cf 91       	pop	r28
 4a0:	1f 91       	pop	r17
 4a2:	0f 91       	pop	r16
 4a4:	ff 90       	pop	r15
 4a6:	ef 90       	pop	r14
 4a8:	08 95       	ret
 4aa:	f6 2e       	mov	r15, r22
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 4ac:	0b 8d       	ldd	r16, Y+27	; 0x1b
 4ae:	10 e0       	ldi	r17, 0x00	; 0
 4b0:	0f 5f       	subi	r16, 0xFF	; 255
 4b2:	1f 4f       	sbci	r17, 0xFF	; 255
 4b4:	0f 73       	andi	r16, 0x3F	; 63
 4b6:	11 27       	eor	r17, r17
 4b8:	e0 2e       	mov	r14, r16
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 4ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
 4bc:	8e 11       	cpse	r24, r14
 4be:	0c c0       	rjmp	.+24     	; 0x4d8 <HardwareSerial::write(unsigned char)+0x74>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	07 fc       	sbrc	r0, 7
 4c4:	fa cf       	rjmp	.-12     	; 0x4ba <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 4c6:	e8 89       	ldd	r30, Y+16	; 0x10
 4c8:	f9 89       	ldd	r31, Y+17	; 0x11
 4ca:	80 81       	ld	r24, Z
 4cc:	85 ff       	sbrs	r24, 5
 4ce:	f5 cf       	rjmp	.-22     	; 0x4ba <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
 4d0:	ce 01       	movw	r24, r28
 4d2:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <HardwareSerial::_tx_udr_empty_irq()>
 4d6:	f1 cf       	rjmp	.-30     	; 0x4ba <HardwareSerial::write(unsigned char)+0x56>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 4d8:	eb 8d       	ldd	r30, Y+27	; 0x1b
 4da:	ec 0f       	add	r30, r28
 4dc:	fd 2f       	mov	r31, r29
 4de:	f1 1d       	adc	r31, r1
 4e0:	e3 5a       	subi	r30, 0xA3	; 163
 4e2:	ff 4f       	sbci	r31, 0xFF	; 255
 4e4:	f0 82       	st	Z, r15
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
 4e6:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
 4e8:	ea 89       	ldd	r30, Y+18	; 0x12
 4ea:	fb 89       	ldd	r31, Y+19	; 0x13
 4ec:	80 81       	ld	r24, Z
 4ee:	80 62       	ori	r24, 0x20	; 32
 4f0:	d2 cf       	rjmp	.-92     	; 0x496 <HardwareSerial::write(unsigned char)+0x32>

000004f2 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
 4f2:	cf 92       	push	r12
 4f4:	df 92       	push	r13
 4f6:	ef 92       	push	r14
 4f8:	ff 92       	push	r15
 4fa:	1f 93       	push	r17
 4fc:	cf 93       	push	r28
 4fe:	df 93       	push	r29
 500:	ec 01       	movw	r28, r24
 502:	6a 01       	movw	r12, r20
 504:	7b 01       	movw	r14, r22
 506:	12 2f       	mov	r17, r18
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 508:	e8 89       	ldd	r30, Y+16	; 0x10
 50a:	f9 89       	ldd	r31, Y+17	; 0x11
 50c:	82 e0       	ldi	r24, 0x02	; 2
 50e:	80 83       	st	Z, r24
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 510:	c1 14       	cp	r12, r1
 512:	81 ee       	ldi	r24, 0xE1	; 225
 514:	d8 06       	cpc	r13, r24
 516:	e1 04       	cpc	r14, r1
 518:	f1 04       	cpc	r15, r1
 51a:	a1 f0       	breq	.+40     	; 0x544 <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
 51c:	60 e0       	ldi	r22, 0x00	; 0
 51e:	79 e0       	ldi	r23, 0x09	; 9
 520:	8d e3       	ldi	r24, 0x3D	; 61
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	a7 01       	movw	r20, r14
 526:	96 01       	movw	r18, r12
 528:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__udivmodsi4>
 52c:	21 50       	subi	r18, 0x01	; 1
 52e:	31 09       	sbc	r19, r1
 530:	41 09       	sbc	r20, r1
 532:	51 09       	sbc	r21, r1
 534:	56 95       	lsr	r21
 536:	47 95       	ror	r20
 538:	37 95       	ror	r19
 53a:	27 95       	ror	r18
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
 53c:	21 15       	cp	r18, r1
 53e:	80 e1       	ldi	r24, 0x10	; 16
 540:	38 07       	cpc	r19, r24
 542:	98 f0       	brcs	.+38     	; 0x56a <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
 544:	e8 89       	ldd	r30, Y+16	; 0x10
 546:	f9 89       	ldd	r31, Y+17	; 0x11
 548:	10 82       	st	Z, r1
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 54a:	60 e8       	ldi	r22, 0x80	; 128
 54c:	74 e8       	ldi	r23, 0x84	; 132
 54e:	8e e1       	ldi	r24, 0x1E	; 30
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	a7 01       	movw	r20, r14
 554:	96 01       	movw	r18, r12
 556:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__udivmodsi4>
 55a:	21 50       	subi	r18, 0x01	; 1
 55c:	31 09       	sbc	r19, r1
 55e:	41 09       	sbc	r20, r1
 560:	51 09       	sbc	r21, r1
 562:	56 95       	lsr	r21
 564:	47 95       	ror	r20
 566:	37 95       	ror	r19
 568:	27 95       	ror	r18
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 56a:	ec 85       	ldd	r30, Y+12	; 0x0c
 56c:	fd 85       	ldd	r31, Y+13	; 0x0d
 56e:	30 83       	st	Z, r19
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
 570:	ee 85       	ldd	r30, Y+14	; 0x0e
 572:	ff 85       	ldd	r31, Y+15	; 0x0f
 574:	20 83       	st	Z, r18
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
 576:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:130

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
 578:	10 68       	ori	r17, 0x80	; 128
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#endif
  *_ucsrc = config;
 57a:	ec 89       	ldd	r30, Y+20	; 0x14
 57c:	fd 89       	ldd	r31, Y+21	; 0x15
 57e:	10 83       	st	Z, r17
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
 580:	ea 89       	ldd	r30, Y+18	; 0x12
 582:	fb 89       	ldd	r31, Y+19	; 0x13
 584:	80 81       	ld	r24, Z
 586:	88 69       	ori	r24, 0x98	; 152
 588:	80 83       	st	Z, r24
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
 58a:	ea 89       	ldd	r30, Y+18	; 0x12
 58c:	fb 89       	ldd	r31, Y+19	; 0x13
 58e:	80 81       	ld	r24, Z
 590:	8f 7d       	andi	r24, 0xDF	; 223
 592:	80 83       	st	Z, r24
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	1f 91       	pop	r17
 59a:	ff 90       	pop	r15
 59c:	ef 90       	pop	r14
 59e:	df 90       	pop	r13
 5a0:	cf 90       	pop	r12
 5a2:	08 95       	ret

000005a4 <__vector_11>:
__vector_11():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 5a4:	1f 92       	push	r1
 5a6:	0f 92       	push	r0
 5a8:	0f b6       	in	r0, 0x3f	; 63
 5aa:	0f 92       	push	r0
 5ac:	11 24       	eor	r1, r1
 5ae:	2f 93       	push	r18
 5b0:	8f 93       	push	r24
 5b2:	9f 93       	push	r25
 5b4:	ef 93       	push	r30
 5b6:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 5b8:	e0 91 8c 00 	lds	r30, 0x008C	; 0x80008c <Serial+0x10>
 5bc:	f0 91 8d 00 	lds	r31, 0x008D	; 0x80008d <Serial+0x11>
 5c0:	80 81       	ld	r24, Z
 5c2:	e0 91 92 00 	lds	r30, 0x0092	; 0x800092 <Serial+0x16>
 5c6:	f0 91 93 00 	lds	r31, 0x0093	; 0x800093 <Serial+0x17>
 5ca:	82 fd       	sbrc	r24, 2
 5cc:	1b c0       	rjmp	.+54     	; 0x604 <__vector_11+0x60>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 5ce:	90 81       	ld	r25, Z
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 5d0:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <Serial+0x19>
 5d4:	8f 5f       	subi	r24, 0xFF	; 255
 5d6:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 5d8:	20 91 96 00 	lds	r18, 0x0096	; 0x800096 <Serial+0x1a>
 5dc:	82 17       	cp	r24, r18
 5de:	41 f0       	breq	.+16     	; 0x5f0 <__vector_11+0x4c>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
 5e0:	e0 91 95 00 	lds	r30, 0x0095	; 0x800095 <Serial+0x19>
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	e4 58       	subi	r30, 0x84	; 132
 5e8:	ff 4f       	sbci	r31, 0xFF	; 255
 5ea:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
 5ec:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <Serial+0x19>
__vector_11():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
 5f0:	ff 91       	pop	r31
 5f2:	ef 91       	pop	r30
 5f4:	9f 91       	pop	r25
 5f6:	8f 91       	pop	r24
 5f8:	2f 91       	pop	r18
 5fa:	0f 90       	pop	r0
 5fc:	0f be       	out	0x3f, r0	; 63
 5fe:	0f 90       	pop	r0
 600:	1f 90       	pop	r1
 602:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 604:	80 81       	ld	r24, Z
__vector_11():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
 606:	f4 cf       	rjmp	.-24     	; 0x5f0 <__vector_11+0x4c>

00000608 <__vector_12>:
__vector_12():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 608:	1f 92       	push	r1
 60a:	0f 92       	push	r0
 60c:	0f b6       	in	r0, 0x3f	; 63
 60e:	0f 92       	push	r0
 610:	11 24       	eor	r1, r1
 612:	2f 93       	push	r18
 614:	3f 93       	push	r19
 616:	4f 93       	push	r20
 618:	5f 93       	push	r21
 61a:	6f 93       	push	r22
 61c:	7f 93       	push	r23
 61e:	8f 93       	push	r24
 620:	9f 93       	push	r25
 622:	af 93       	push	r26
 624:	bf 93       	push	r27
 626:	ef 93       	push	r30
 628:	ff 93       	push	r31
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
 62a:	8c e7       	ldi	r24, 0x7C	; 124
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
 632:	ff 91       	pop	r31
 634:	ef 91       	pop	r30
 636:	bf 91       	pop	r27
 638:	af 91       	pop	r26
 63a:	9f 91       	pop	r25
 63c:	8f 91       	pop	r24
 63e:	7f 91       	pop	r23
 640:	6f 91       	pop	r22
 642:	5f 91       	pop	r21
 644:	4f 91       	pop	r20
 646:	3f 91       	pop	r19
 648:	2f 91       	pop	r18
 64a:	0f 90       	pop	r0
 64c:	0f be       	out	0x3f, r0	; 63
 64e:	0f 90       	pop	r0
 650:	1f 90       	pop	r1
 652:	18 95       	reti

00000654 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 654:	8c e7       	ldi	r24, 0x7C	; 124
 656:	90 e0       	ldi	r25, 0x00	; 0
 658:	0e 94 a6 01 	call	0x34c	; 0x34c <HardwareSerial::available()>
 65c:	21 e0       	ldi	r18, 0x01	; 1
 65e:	89 2b       	or	r24, r25
 660:	09 f4       	brne	.+2      	; 0x664 <Serial0_available()+0x10>
 662:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
 664:	82 2f       	mov	r24, r18
 666:	08 95       	ret

00000668 <_GLOBAL__sub_I___vector_11>:
_ZN5PrintC4Ev():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 668:	ec e7       	ldi	r30, 0x7C	; 124
 66a:	f0 e0       	ldi	r31, 0x00	; 0
 66c:	13 82       	std	Z+3, r1	; 0x03
 66e:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 670:	88 ee       	ldi	r24, 0xE8	; 232
 672:	93 e0       	ldi	r25, 0x03	; 3
 674:	a0 e0       	ldi	r26, 0x00	; 0
 676:	b0 e0       	ldi	r27, 0x00	; 0
 678:	84 83       	std	Z+4, r24	; 0x04
 67a:	95 83       	std	Z+5, r25	; 0x05
 67c:	a6 83       	std	Z+6, r26	; 0x06
 67e:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 680:	8c e6       	ldi	r24, 0x6C	; 108
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	91 83       	std	Z+1, r25	; 0x01
 686:	80 83       	st	Z, r24
 688:	80 e4       	ldi	r24, 0x40	; 64
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	95 87       	std	Z+13, r25	; 0x0d
 68e:	84 87       	std	Z+12, r24	; 0x0c
 690:	29 e2       	ldi	r18, 0x29	; 41
 692:	30 e0       	ldi	r19, 0x00	; 0
 694:	37 87       	std	Z+15, r19	; 0x0f
 696:	26 87       	std	Z+14, r18	; 0x0e
 698:	2b e2       	ldi	r18, 0x2B	; 43
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	31 8b       	std	Z+17, r19	; 0x11
 69e:	20 8b       	std	Z+16, r18	; 0x10
 6a0:	2a e2       	ldi	r18, 0x2A	; 42
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	33 8b       	std	Z+19, r19	; 0x13
 6a6:	22 8b       	std	Z+18, r18	; 0x12
 6a8:	95 8b       	std	Z+21, r25	; 0x15
 6aa:	84 8b       	std	Z+20, r24	; 0x14
 6ac:	8c e2       	ldi	r24, 0x2C	; 44
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	97 8b       	std	Z+23, r25	; 0x17
 6b2:	86 8b       	std	Z+22, r24	; 0x16
 6b4:	11 8e       	std	Z+25, r1	; 0x19
 6b6:	12 8e       	std	Z+26, r1	; 0x1a
 6b8:	13 8e       	std	Z+27, r1	; 0x1b
 6ba:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_11():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
 6bc:	08 95       	ret

000006be <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 6be:	af 92       	push	r10
 6c0:	bf 92       	push	r11
 6c2:	cf 92       	push	r12
 6c4:	df 92       	push	r13
 6c6:	ef 92       	push	r14
 6c8:	ff 92       	push	r15
 6ca:	0f 93       	push	r16
 6cc:	1f 93       	push	r17
 6ce:	cf 93       	push	r28
 6d0:	df 93       	push	r29
 6d2:	6c 01       	movw	r12, r24
 6d4:	7b 01       	movw	r14, r22
 6d6:	8b 01       	movw	r16, r22
 6d8:	04 0f       	add	r16, r20
 6da:	15 1f       	adc	r17, r21
 6dc:	eb 01       	movw	r28, r22
 6de:	5e 01       	movw	r10, r28
 6e0:	ae 18       	sub	r10, r14
 6e2:	bf 08       	sbc	r11, r15
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
 6e4:	c0 17       	cp	r28, r16
 6e6:	d1 07       	cpc	r29, r17
 6e8:	59 f0       	breq	.+22     	; 0x700 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
 6ea:	69 91       	ld	r22, Y+
 6ec:	d6 01       	movw	r26, r12
 6ee:	ed 91       	ld	r30, X+
 6f0:	fc 91       	ld	r31, X
 6f2:	01 90       	ld	r0, Z+
 6f4:	f0 81       	ld	r31, Z
 6f6:	e0 2d       	mov	r30, r0
 6f8:	c6 01       	movw	r24, r12
 6fa:	09 95       	icall
 6fc:	89 2b       	or	r24, r25
 6fe:	79 f7       	brne	.-34     	; 0x6de <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
 700:	c5 01       	movw	r24, r10
 702:	df 91       	pop	r29
 704:	cf 91       	pop	r28
 706:	1f 91       	pop	r17
 708:	0f 91       	pop	r16
 70a:	ff 90       	pop	r15
 70c:	ef 90       	pop	r14
 70e:	df 90       	pop	r13
 710:	cf 90       	pop	r12
 712:	bf 90       	pop	r11
 714:	af 90       	pop	r10
 716:	08 95       	ret

00000718 <map(long, long, long, long, long)>:
_Z3maplllll():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/WMath.cpp:53
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 718:	4f 92       	push	r4
 71a:	5f 92       	push	r5
 71c:	6f 92       	push	r6
 71e:	7f 92       	push	r7
 720:	af 92       	push	r10
 722:	bf 92       	push	r11
 724:	cf 92       	push	r12
 726:	df 92       	push	r13
 728:	ef 92       	push	r14
 72a:	ff 92       	push	r15
 72c:	0f 93       	push	r16
 72e:	1f 93       	push	r17
 730:	cf 93       	push	r28
 732:	df 93       	push	r29
 734:	cd b7       	in	r28, 0x3d	; 61
 736:	de b7       	in	r29, 0x3e	; 62
 738:	29 01       	movw	r4, r18
 73a:	3a 01       	movw	r6, r20
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/WMath.cpp:54
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 73c:	9b 01       	movw	r18, r22
 73e:	ac 01       	movw	r20, r24
 740:	24 19       	sub	r18, r4
 742:	35 09       	sbc	r19, r5
 744:	46 09       	sbc	r20, r6
 746:	57 09       	sbc	r21, r7
 748:	89 89       	ldd	r24, Y+17	; 0x11
 74a:	9a 89       	ldd	r25, Y+18	; 0x12
 74c:	ab 89       	ldd	r26, Y+19	; 0x13
 74e:	bc 89       	ldd	r27, Y+20	; 0x14
 750:	bc 01       	movw	r22, r24
 752:	cd 01       	movw	r24, r26
 754:	6a 19       	sub	r22, r10
 756:	7b 09       	sbc	r23, r11
 758:	8c 09       	sbc	r24, r12
 75a:	9d 09       	sbc	r25, r13
 75c:	0e 94 43 04 	call	0x886	; 0x886 <__mulsi3>
 760:	a8 01       	movw	r20, r16
 762:	97 01       	movw	r18, r14
 764:	24 19       	sub	r18, r4
 766:	35 09       	sbc	r19, r5
 768:	46 09       	sbc	r20, r6
 76a:	57 09       	sbc	r21, r7
 76c:	0e 94 75 04 	call	0x8ea	; 0x8ea <__divmodsi4>
 770:	ca 01       	movw	r24, r20
 772:	b9 01       	movw	r22, r18
 774:	6a 0d       	add	r22, r10
 776:	7b 1d       	adc	r23, r11
 778:	8c 1d       	adc	r24, r12
 77a:	9d 1d       	adc	r25, r13
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/WMath.cpp:55
}
 77c:	df 91       	pop	r29
 77e:	cf 91       	pop	r28
 780:	1f 91       	pop	r17
 782:	0f 91       	pop	r16
 784:	ff 90       	pop	r15
 786:	ef 90       	pop	r14
 788:	df 90       	pop	r13
 78a:	cf 90       	pop	r12
 78c:	bf 90       	pop	r11
 78e:	af 90       	pop	r10
 790:	7f 90       	pop	r7
 792:	6f 90       	pop	r6
 794:	5f 90       	pop	r5
 796:	4f 90       	pop	r4
 798:	08 95       	ret

0000079a <initVariant>:
initVariant():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
 79a:	08 95       	ret

0000079c <main>:
main():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
 79c:	0e 94 27 04 	call	0x84e	; 0x84e <init>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
 7a0:	0e 94 cd 03 	call	0x79a	; 0x79a <initVariant>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
 7a4:	0e 94 94 00 	call	0x128	; 0x128 <setup>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
 7a8:	c3 ee       	ldi	r28, 0xE3	; 227
 7aa:	d1 e0       	ldi	r29, 0x01	; 1
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
 7ac:	0e 94 b1 00 	call	0x162	; 0x162 <loop>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
 7b0:	20 97       	sbiw	r28, 0x00	; 0
 7b2:	e1 f3       	breq	.-8      	; 0x7ac <main+0x10>
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
 7b4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <serialEventRun()>
 7b8:	f9 cf       	rjmp	.-14     	; 0x7ac <main+0x10>

000007ba <__vector_9>:
__vector_9():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
 7ba:	1f 92       	push	r1
 7bc:	0f 92       	push	r0
 7be:	0f b6       	in	r0, 0x3f	; 63
 7c0:	0f 92       	push	r0
 7c2:	11 24       	eor	r1, r1
 7c4:	2f 93       	push	r18
 7c6:	3f 93       	push	r19
 7c8:	8f 93       	push	r24
 7ca:	9f 93       	push	r25
 7cc:	af 93       	push	r26
 7ce:	bf 93       	push	r27
 7d0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timer0_millis>
 7d4:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timer0_millis+0x1>
 7d8:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <timer0_millis+0x2>
 7dc:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <timer0_millis+0x3>
 7e0:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <timer0_fract>
 7e4:	23 e0       	ldi	r18, 0x03	; 3
 7e6:	23 0f       	add	r18, r19
 7e8:	2d 37       	cpi	r18, 0x7D	; 125
 7ea:	68 f1       	brcs	.+90     	; 0x846 <__vector_9+0x8c>
 7ec:	26 e8       	ldi	r18, 0x86	; 134
 7ee:	23 0f       	add	r18, r19
 7f0:	02 96       	adiw	r24, 0x02	; 2
 7f2:	a1 1d       	adc	r26, r1
 7f4:	b1 1d       	adc	r27, r1
 7f6:	20 93 1d 01 	sts	0x011D, r18	; 0x80011d <timer0_fract>
 7fa:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timer0_millis>
 7fe:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timer0_millis+0x1>
 802:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timer0_millis+0x2>
 806:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timer0_millis+0x3>
 80a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <timer0_overflow_count>
 80e:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <timer0_overflow_count+0x1>
 812:	a0 91 1b 01 	lds	r26, 0x011B	; 0x80011b <timer0_overflow_count+0x2>
 816:	b0 91 1c 01 	lds	r27, 0x011C	; 0x80011c <timer0_overflow_count+0x3>
 81a:	01 96       	adiw	r24, 0x01	; 1
 81c:	a1 1d       	adc	r26, r1
 81e:	b1 1d       	adc	r27, r1
 820:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <timer0_overflow_count>
 824:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <timer0_overflow_count+0x1>
 828:	a0 93 1b 01 	sts	0x011B, r26	; 0x80011b <timer0_overflow_count+0x2>
 82c:	b0 93 1c 01 	sts	0x011C, r27	; 0x80011c <timer0_overflow_count+0x3>
 830:	bf 91       	pop	r27
 832:	af 91       	pop	r26
 834:	9f 91       	pop	r25
 836:	8f 91       	pop	r24
 838:	3f 91       	pop	r19
 83a:	2f 91       	pop	r18
 83c:	0f 90       	pop	r0
 83e:	0f be       	out	0x3f, r0	; 63
 840:	0f 90       	pop	r0
 842:	1f 90       	pop	r1
 844:	18 95       	reti
 846:	01 96       	adiw	r24, 0x01	; 1
 848:	a1 1d       	adc	r26, r1
 84a:	b1 1d       	adc	r27, r1
 84c:	d4 cf       	rjmp	.-88     	; 0x7f6 <__vector_9+0x3c>

0000084e <init>:
init():
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
 84e:	78 94       	sei
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:966
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
  // This combination is for the ATmega8535, ATmega8, ATmega16, ATmega32, ATmega8515, ATmega162
  TCCR0 |= _BV(CS01) | _BV(CS00);
 850:	83 b7       	in	r24, 0x33	; 51
 852:	83 60       	ori	r24, 0x03	; 3
 854:	83 bf       	out	0x33, r24	; 51
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:968
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
 856:	83 b7       	in	r24, 0x33	; 51
 858:	88 64       	ori	r24, 0x48	; 72
 85a:	83 bf       	out	0x33, r24	; 51
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
 85c:	89 b7       	in	r24, 0x39	; 57
 85e:	81 60       	ori	r24, 0x01	; 1
 860:	89 bf       	out	0x39, r24	; 57
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
 862:	82 e0       	ldi	r24, 0x02	; 2
 864:	8e bd       	out	0x2e, r24	; 46
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
 866:	8e b5       	in	r24, 0x2e	; 46
 868:	81 60       	ori	r24, 0x01	; 1
 86a:	8e bd       	out	0x2e, r24	; 46
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
 86c:	8f b5       	in	r24, 0x2f	; 47
 86e:	81 60       	ori	r24, 0x01	; 1
 870:	8f bd       	out	0x2f, r24	; 47
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
 872:	85 b5       	in	r24, 0x25	; 37
 874:	84 60       	ori	r24, 0x04	; 4
 876:	85 bd       	out	0x25, r24	; 37
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
 878:	85 b5       	in	r24, 0x25	; 37
 87a:	80 64       	ori	r24, 0x40	; 64
 87c:	85 bd       	out	0x25, r24	; 37
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
 87e:	87 e8       	ldi	r24, 0x87	; 135
 880:	86 b9       	out	0x06, r24	; 6
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:1068

  // The bootloader connects pins 0 and 1 to the USART; disconnect them
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
 882:	1a b8       	out	0x0a, r1	; 10
C:\Users\Rajenda Bera\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.1\cores\MCUdude_corefiles/wiring.c:1072
#elif defined(UCSR0B)
  UCSR0B = 0;
#endif
}
 884:	08 95       	ret

00000886 <__mulsi3>:
__mulsi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:648
 886:	db 01       	movw	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:649
 888:	8f 93       	push	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:650
 88a:	9f 93       	push	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:651
 88c:	0e 94 94 04 	call	0x928	; 0x928 <__muluhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:652
 890:	bf 91       	pop	r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:653
 892:	af 91       	pop	r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:655
 894:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:656
 896:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:657
 898:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:658
 89a:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:659
 89c:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:660
 89e:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:661
 8a0:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:662
 8a2:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:663
 8a4:	08 95       	ret

000008a6 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
 8a6:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
 8a8:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
 8aa:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
 8ac:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
 8ae:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
 8b0:	0d c0       	rjmp	.+26     	; 0x8cc <__udivmodsi4_ep>

000008b2 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
 8b2:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
 8b4:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
 8b6:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
 8b8:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
 8ba:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
 8bc:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
 8be:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
 8c0:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
 8c2:	20 f0       	brcs	.+8      	; 0x8cc <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
 8c4:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
 8c6:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
 8c8:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
 8ca:	f5 0b       	sbc	r31, r21

000008cc <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
 8cc:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
 8ce:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
 8d0:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
 8d2:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
 8d4:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
 8d6:	69 f7       	brne	.-38     	; 0x8b2 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
 8d8:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
 8da:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
 8dc:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
 8de:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
 8e0:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
 8e2:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
 8e4:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
 8e6:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
 8e8:	08 95       	ret

000008ea <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
 8ea:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
 8ec:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
 8ee:	1e f4       	brtc	.+6      	; 0x8f6 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
 8f0:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
 8f2:	0e 94 8c 04 	call	0x918	; 0x918 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
 8f6:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
 8f8:	07 d0       	rcall	.+14     	; 0x908 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
 8fa:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
 8fe:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
 900:	03 d0       	rcall	.+6      	; 0x908 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
 902:	4e f4       	brtc	.+18     	; 0x916 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
 904:	0c 94 8c 04 	jmp	0x918	; 0x918 <__negsi2>

00000908 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
 908:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
 90a:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
 90c:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
 90e:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
 910:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
 912:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
 914:	5f 4f       	sbci	r21, 0xFF	; 255

00000916 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
 916:	08 95       	ret

00000918 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
 918:	90 95       	com	r25
 91a:	80 95       	com	r24
 91c:	70 95       	com	r23
 91e:	61 95       	neg	r22
 920:	7f 4f       	sbci	r23, 0xFF	; 255
 922:	8f 4f       	sbci	r24, 0xFF	; 255
 924:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
 926:	08 95       	ret

00000928 <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
 928:	0e 94 a5 04 	call	0x94a	; 0x94a <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
 92c:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
 92e:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
 930:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
 932:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
 934:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
 936:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
 938:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
 93a:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
 93c:	08 95       	ret

0000093e <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
 93e:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
 940:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
 942:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
 944:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
 946:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
 948:	09 94       	ijmp

0000094a <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
 94a:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
 94c:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
 94e:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
 950:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
 952:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
 954:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
 956:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
 958:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
 95a:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
 95c:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
 95e:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
 960:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
 962:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
 964:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
 966:	08 95       	ret

00000968 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 968:	f8 94       	cli

0000096a <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 96a:	ff cf       	rjmp	.-2      	; 0x96a <__stop_program>
